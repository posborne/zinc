import re
import jinja2

IOREGS_TEMPLATE = """\
//
// Generated by svdconvert.py from SVD XML description for device:
// - Device Name: {{ device.name }}
// - Description: {{ device.description }}
// - Device Vendor: {{ device.vendor }}
// - Device Version: {{ device.version }}
//
use volatile_cell::VolatileCell;
use core::ops::Drop;

# for peripheral in device.peripherals
ioregs!({{ peripheral.name }} @ {{ peripheral.base_address|hex }} = {  //! {{ peripheral.description }}
  # for reg in peripheral.registers
  {{ reg.address_offset|hex }} => reg{{ reg.size }} {{ reg.name }} {  //! {{ reg.description }}
    # for f in reg.fields
    # if not f.is_enumerated_type
    {{ f|bitrange }} => {{ f.name }} {{ f.access|convert_access }},  //= {{ f.description }}
    # else
    {{ f|bitrange }} => {{ f.name }}{{ f.access|convert_access }} {  //! {{ f.description }}
      # for e in f.enumerated_values if not e.is_reserved
      {{ e.value }} => {{ e|enumkey }},  //= {{ e.description }}
      # endfor
    }
    # endif
    # endfor
  },
  # endfor
});

#endfor
"""


def enumkey(enum):
    if re.match(r'^\d+$', enum.name):
        safe_name = "E_{}".format(enum.name)

        # Let's try to magically generate a name based on the description... This should be fun!
        generated_name = enum.description.upper()

        # Don't even try on some descrpitions as they are known to cause problems
        if '(' in generated_name or '=' in generated_name or ':' in generated_name or ';' in generated_name:
            return safe_name

        generated_name = generated_name.replace(" ", "_")
        generated_name = generated_name.replace("-", "_")
        generated_name = generated_name.translate(None, "!@#$%^&*,./\\")

        return generated_name
    return enum.name


def hexfilter(value, width_bytes=1):
    fmt = r"0x%0{digits}X".format(digits=2 * width_bytes)
    return "0x%02X" % int(value)


def bitrange(field):
    if field.bit_width == 1:
        return field.bit_offset
    else:
        # provide inclusive range (e.g. offset 0, width 4 => 0..3)
        return "{}..{}".format(field.bit_offset, field.bit_offset + field.bit_width - 1)


def convert_access(access):
    return {
        "read-only": "ro",
        "write-only": "wo",
        "writeOnce": "wo",
        "read-write": "rw",
        "read-writeOnce": "rw",
    }[access]


class ZincIoregsCodeGenerator(object):
    """Code generator that generates a Zinc ioregs! module file"""

    def __init__(self, svd_device, output_stream):
        self.svd_device = svd_device
        self.output_stream = output_stream

    def generate(self):
        jinja2_env = jinja2.Environment()
        jinja2_env.filters['hex'] = hexfilter
        jinja2_env.filters['bitrange'] = bitrange
        jinja2_env.filters['convert_access'] = convert_access
        jinja2_env.filters['enumkey'] = enumkey

        # this helps deal with some of the whitespace issues you run into otherwise
        jinja2_env.line_statement_prefix = '#'
        template = jinja2_env.from_string(IOREGS_TEMPLATE)
        self.output_stream.write(template.render(device=self.svd_device))
